// Generated by IcedCoffeeScript 108.0.7
(function() {
  var Account, KeyManager, WordArray, bufsplit, iced, kbpgp, make_esc, triplesec, xor_buffers, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  triplesec = require("triplesec");

  kbpgp = require('kbpgp');

  WordArray = triplesec.WordArray;

  KeyManager = kbpgp.KeyManager;

  make_esc = require('iced-error').make_esc;

  xor_buffers = require('../base/util').xor_buffers;

  bufsplit = function(buf, lens) {
    var e, l, ret, s, _i, _len;
    s = 0;
    ret = [];
    for (_i = 0, _len = lens.length; _i < _len; _i++) {
      l = lens[_i];
      e = s + l;
      ret.push(buf.slice(s, e));
      s = e;
    }
    return ret;
  };

  exports.Account = Account = (function() {
    function Account(_arg) {
      var C;
      this.config = _arg.config;
      C = this.config.C;
      this.triplesec_version = this.config.C.triplesec.version;
      this.nacl = {};
      this.lks = {};
      this.extra_keymaterial = C.pwh.derived_key_bytes + C.nacl.eddsa_secret_key_bytes + C.nacl.dh_secret_key_bytes + C.device.lks_client_half_bytes;
      this.new_tsenc();
    }

    Account.prototype.new_tsenc = function() {
      return this.enc = new triplesec.Encryptor({
        version: this.triplesec_version
      });
    };

    Account.prototype.resalt = function(_arg, cb) {
      var err, keys, progress_hook, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      salt = _arg.salt, progress_hook = _arg.progress_hook;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.resalt"
          });
          _this.enc.resalt({
            salt: salt,
            extra_keymaterial: _this.extra_keymaterial,
            progress_hook: progress_hook
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return keys = arguments[1];
              };
            })(),
            lineno: 49
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            throw err;
          }
          return cb(keys);
        };
      })(this));
    };

    Account.prototype.scrypt_hash_passphrase = function(_arg, cb) {
      var C, encoding, key, keys, km, progress_hook, pwh, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      key = _arg.key, salt = _arg.salt, progress_hook = _arg.progress_hook, encoding = _arg.encoding;
      key = new triplesec.Buffer(key, 'utf8');
      this.enc.set_key(key);
      C = this.config.C;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.scrypt_hash_passphrase"
          });
          _this.resalt({
            salt: salt,
            progress_hook: progress_hook
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return keys = arguments[0];
              };
            })(),
            lineno: 69
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          km = keys.extra;
          _ref = bufsplit(km, [C.pwh.derived_key_bytes, C.nacl.eddsa_secret_key_bytes, C.nacl.dh_secret_key_bytes, C.device.lks_client_half_bytes]), pwh = _ref[0], _this.nacl.eddsa = _ref[1], _this.nacl.dh = _ref[2], _this.lks.clienf_half = _ref[3];
          if (encoding != null) {
            pwh = pwh.toString(encoding);
          }
          return cb(pwh);
        };
      })(this));
    };

    Account.prototype.fix_signup_bundle = function(bundle, cb) {
      var nb, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      nb = triplesec.V[this.triplesec_version].salt_size;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.fix_signup_bundle"
          });
          kbpgp.rand.SRF().random_bytes(nb, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return salt = arguments[0];
              };
            })(),
            lineno: 85
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
              funcname: "Account.fix_signup_bundle"
            });
            _this.scrypt_hash_passphrase({
              key: bundle.pw,
              salt: salt,
              encoding: 'hex'
            }, __iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.pwh = arguments[0];
                };
              })(bundle),
              lineno: 86
            }));
            __iced_deferrals._fulfill();
          })(function() {
            bundle.salt = salt.toString('hex');
            bundle.pwh_version = _this.triplesec_version;
            delete bundle.pw;
            return cb();
          });
        };
      })(this));
    };

    Account.prototype.gen_new_pwh = function(_arg, cb) {
      var pw, pwh, pwh_version, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pw = _arg.pw, salt = _arg.salt;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.gen_new_pwh"
          });
          _this.scrypt_hash_passphrase({
            key: pw,
            salt: salt,
            encoding: 'hex'
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return pwh = arguments[0];
              };
            })(),
            lineno: 101
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          pwh_version = _this.triplesec_version;
          return cb(null, pwh, pwh_version);
        };
      })(this));
    };

    Account.prototype.pw_to_pwh = function(_arg, cb) {
      var email_or_username, err, got, pw, pwh, pwh_version, res, salt, uid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pw = _arg.pw, email_or_username = _arg.email_or_username, uid = _arg.uid;
      err = pwh = pwh_version = salt = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.pw_to_pwh"
          });
          _this.config.request({
            method: "GET",
            endpoint: 'getsalt',
            params: {
              email_or_username: email_or_username,
              uid: uid
            }
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 116
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (err != null) {
              return __iced_k();
            } else {
              (function(__iced_k) {
                var _ref;
                if (!((got = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? _ref.pwh_version : void 0 : void 0) === _this.triplesec_version)) {
                  return __iced_k(err = new Error("Can only support PW hash version " + _this.triplesec_version + "; got " + got + " for " + (_this.config.escape_user_content(email_or_username))));
                } else {
                  salt = new triplesec.Buffer(res.body.salt, 'hex');
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                      funcname: "Account.pw_to_pwh"
                    });
                    _this.scrypt_hash_passphrase({
                      salt: salt,
                      key: pw,
                      encoding: null
                    }, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return pwh = arguments[0];
                        };
                      })(),
                      lineno: 122
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(pwh_version = _this.triplesec_version);
                  });
                }
              })(__iced_k);
            }
          })(function() {
            var _ref;
            return cb(err, pwh, pwh_version, salt, typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? _ref.login_session : void 0 : void 0);
          });
        };
      })(this));
    };

    Account.prototype.pw_to_login = function(_arg, cb) {
      var email_or_username, err, hmac, hmac_pwh, login_session, login_session_b64, pw, pwh, pwh_version, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pw = _arg.pw, email_or_username = _arg.email_or_username;
      login_session = hmac_pwh = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.pw_to_login"
          });
          _this.pw_to_pwh({
            pw: pw,
            email_or_username: email_or_username
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                pwh = arguments[1];
                pwh_version = arguments[2];
                salt = arguments[3];
                return login_session_b64 = arguments[4];
              };
            })(),
            lineno: 130
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            login_session = new triplesec.Buffer(login_session_b64, 'base64');
            hmac = new triplesec.HMAC(WordArray.from_buffer(pwh));
            hmac_pwh = hmac.update(WordArray.from_buffer(login_session)).finalize().to_hex();
            login_session = login_session_b64;
          }
          return cb(err, login_session, hmac_pwh, salt);
        };
      })(this));
    };

    Account.prototype.get_public_pgp_key = function(username, cb) {
      var err, fields, res, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      fields = "public_keys";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.get_public_pgp_key"
          });
          _this.config.request({
            endpoint: "user/lookup",
            params: {
              username: username,
              fields: fields
            }
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 145
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1, _ref2, _ref3;
          if (err == null) {
            ret = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? (_ref1 = _ref.them) != null ? (_ref2 = _ref1.public_keys) != null ? (_ref3 = _ref2.primary) != null ? _ref3.bundle : void 0 : void 0 : void 0 : void 0 : void 0;
            if (ret == null) {
              err = new Error("Cannot find a public key for '" + (_this.config.escape_user_content(username)) + "'");
            }
          }
          return cb(err, ret);
        };
      })(this));
    };

    Account.prototype.get_devices = function(_arg, cb) {
      var err, fields, res, ret, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      err = ret = null;
      fields = "devices";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.get_devices"
          });
          _this.config.request({
            endpoint: "user/lookup",
            params: {
              username: username,
              fields: fields
            }
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 156
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1;
          if (err == null) {
            ret = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? (_ref1 = _ref.them) != null ? _ref1.devices : void 0 : void 0 : void 0;
            if (ret == null) {
              err = new Error("Cannot find devices for '" + (_this.config.escape_user_content(username)));
            }
          }
          return cb(err, ret);
        };
      })(this));
    };

    Account.prototype.get_public_pgp_keys = function(username, cb) {
      var err, fields, res, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      fields = "public_keys";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.get_public_pgp_keys"
          });
          _this.config.request({
            endpoint: "user/lookup",
            params: {
              username: username
            }
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 167
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1, _ref2;
          if (err == null) {
            ret = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? (_ref1 = _ref.them) != null ? (_ref2 = _ref1.public_keys) != null ? _ref2.pgp_public_keys : void 0 : void 0 : void 0 : void 0;
            if (!(ret != null ? ret.length : void 0)) {
              err = new Error("Cannot find a public key for '" + (_this.config.escape_user_content(username)) + "'");
            }
          }
          return cb(err, ret);
        };
      })(this));
    };

    Account.prototype.get_unlocked_private_primary_pgp_key = function(pw, cb) {
      var bundle, err, esc, passphrase, res, sk, tsenc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(function(err) {
        return cb(err, null);
      });
      passphrase = new triplesec.Buffer(pw);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.get_unlocked_private_primary_pgp_key"
          });
          _this.config.request({
            method: "GET",
            endpoint: "me"
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return res = arguments[0];
              };
            })(),
            lineno: 178
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1, _ref2, _ref3;
          bundle = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? (_ref1 = _ref.me) != null ? (_ref2 = _ref1.private_keys) != null ? (_ref3 = _ref2.primary) != null ? _ref3.bundle : void 0 : void 0 : void 0 : void 0 : void 0;
          sk = err = null;
          (function(__iced_k) {
            if (bundle != null) {
              tsenc = _this.get_tsenc_for_decryption({
                passphrase: passphrase
              });
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                  funcname: "Account.get_unlocked_private_primary_pgp_key"
                });
                KeyManager.import_from_p3skb({
                  raw: bundle
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return sk = arguments[0];
                    };
                  })(),
                  lineno: 183
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                    funcname: "Account.get_unlocked_private_primary_pgp_key"
                  });
                  sk.unlock_p3skb({
                    tsenc: tsenc
                  }, esc(__iced_deferrals.defer({
                    lineno: 184
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            err = null;
            if (sk == null) {
              err = new Error("Failed to get and unlock your private key");
            }
            return cb(err, sk);
          });
        };
      })(this));
    };

    Account.prototype.get_unlocked_private_pgp_keys = function(pw, cb) {
      var esc, passphrase, res, sk, sks, tsenc, ___iced_passed_deferral, __iced_deferrals, __iced_k, _next;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "get_unlocked_private_pgp_keys");
      sks = [];
      passphrase = new triplesec.Buffer(pw);
      tsenc = this.get_tsenc_for_decryption({
        passphrase: passphrase
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.get_unlocked_private_pgp_keys"
          });
          _this.config.request({
            method: "GET",
            endpoint: "me"
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return res = arguments[0];
              };
            })(),
            lineno: 197
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            var _i, _len, _ref, _ref1, _ref2, _ref3, _results, _while;
            _ref = typeof res !== "undefined" && res !== null ? (_ref1 = res.body) != null ? (_ref2 = _ref1.me) != null ? (_ref3 = _ref2.private_keys) != null ? _ref3.all : void 0 : void 0 : void 0 : void 0;
            _len = _ref.length;
            _i = 0;
            _while = function(__iced_k) {
              var _break, _continue;
              _break = __iced_k;
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = _continue;
              if (!(_i < _len)) {
                return _break();
              } else {
                sk = _ref[_i];
                if (sk.type === _this.config.C.key.key_type.P3KSB_PRIVATE) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                      funcname: "Account.get_unlocked_private_pgp_keys"
                    });
                    KeyManager.import_from_p3skb({
                      raw: bundle
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return sk = arguments[0];
                        };
                      })(),
                      lineno: 199
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                        funcname: "Account.get_unlocked_private_pgp_keys"
                      });
                      sk.unlock_p3skb({
                        tsenc: tsenc
                      }, esc(__iced_deferrals.defer({
                        lineno: 200
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      return _next(sks.push(sk));
                    });
                  });
                } else {
                  return _continue();
                }
              }
            };
            _while(__iced_k);
          })(function() {
            return cb(err, sks);
          });
        };
      })(this));
    };

    Account.prototype.export_my_private_key = function(pw, cb) {
      var armored_private, err, esc, passphrase, sk, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "export_my_private_key");
      err = armored_private = null;
      passphrase = new triplesec.Buffer(pw);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.export_my_private_key"
          });
          _this.get_unlocked_private_primary_pgp_key(pw, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return sk = arguments[0];
              };
            })(),
            lineno: 210
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
              funcname: "Account.export_my_private_key"
            });
            sk.sign({}, esc(__iced_deferrals.defer({
              lineno: 211
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                funcname: "Account.export_my_private_key"
              });
              sk.export_pgp_private_to_client({
                passphrase: passphrase
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return armored_private = arguments[0];
                  };
                })(),
                lineno: 212
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null, armored_private);
            });
          });
        };
      })(this));
    };

    Account.prototype.change_passphrase = function(oldpw, newpw, cb) {
      var endpoint, esc, params, res, salt, sk, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      params = {};
      esc = make_esc(cb, "change_password");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.change_passphrase"
          });
          _this.pw_to_login({
            pw: oldpw
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                __slot_1.login_session = arguments[0];
                __slot_2.hmac_pwh = arguments[1];
                return salt = arguments[2];
              };
            })(params, params),
            lineno: 220
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
              funcname: "Account.change_passphrase"
            });
            _this.get_unlocked_private_primary_pgp_key(oldpw, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return sk = arguments[0];
                };
              })(),
              lineno: 221
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                funcname: "Account.change_passphrase"
              });
              _this.gen_new_pwh({
                pw: newpw,
                salt: salt
              }, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1, __slot_2) {
                  return function() {
                    __slot_1.pwh = arguments[0];
                    return __slot_2.pwh_version = arguments[1];
                  };
                })(params, params),
                lineno: 222
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (typeof sk !== "undefined" && sk !== null) {
                  endpoint = "key/add";
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                      funcname: "Account.change_passphrase"
                    });
                    sk.export_private_to_server({
                      tsenc: _this.enc
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function(__slot_1) {
                        return function() {
                          return __slot_1.private_key = arguments[0];
                        };
                      })(params),
                      lineno: 225
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k(endpoint = "account/update");
                }
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                    funcname: "Account.change_passphrase"
                  });
                  _this.config.request({
                    method: "POST",
                    endpoint: endpoint,
                    params: params
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return res = arguments[0];
                      };
                    })(),
                    lineno: 228
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return cb(null, typeof res !== "undefined" && res !== null ? res.body : void 0);
                });
              });
            });
          });
        };
      })(this));
    };

    Account.prototype._cpp2_derive_passphrase_components = function(_arg, cb) {
      var C, key, keys, km, lks_clienf_half, passphrase, pwh, salt, tsenc, _, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      tsenc = _arg.tsenc, salt = _arg.salt, passphrase = _arg.passphrase;
      key = new Buffer(passphrase, 'utf8');
      C = this.config.C;
      tsenc || (tsenc = new triplesec.Encryptor({
        version: this.triplesec_version
      }));
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account._cpp2_derive_passphrase_components"
          });
          tsenc.resalt({
            salt: salt
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return keys = arguments[0];
              };
            })(),
            lineno: 239
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          km = keys.extra;
          _ref = bufsplit(km, [C.pwh.derived_key_bytes, C.nacl.eddsa_secret_key_bytes, C.nacl.dh_secret_key_bytes, C.device.lks_client_half_bytes]), pwh = _ref[0], _ = _ref[1], _ = _ref[2], lks_clienf_half = _ref[3];
          return cb(null, {
            tsenc: tsenc,
            pwh: pwh,
            lks_client_half: lks_client_half
          });
        };
      })(this));
    };

    Account.prototype._cpp2_encrypt_lks_client_half = function(_arg, cb) {
      var client_half, device, deviceid, esc, key_role, kid, km, me, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k, _next;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      me = _arg.me, client_half = _arg.client_half;
      ret = {};
      esc = make_esc(cb, "_cpp2_encrypt_lks_client_half");
      (function(_this) {
        return (function(__iced_k) {
          var _i, _k, _keys, _ref, _results, _while;
          _ref = me.devices;
          _keys = (function() {
            var _results1;
            _results1 = [];
            for (_k in _ref) {
              _results1.push(_k);
            }
            return _results1;
          })();
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _keys.length)) {
              return _break();
            } else {
              deviceid = _keys[_i];
              device = _ref[deviceid];
              (function(__iced_k) {
                var _j, _len, _ref1, _results1, _while;
                _ref1 = device.keys;
                _len = _ref1.length;
                _j = 0;
                _while = function(__iced_k) {
                  var _break, _continue, _ref2;
                  _break = __iced_k;
                  _continue = function() {
                    return iced.trampoline(function() {
                      ++_j;
                      return _while(__iced_k);
                    });
                  };
                  _next = _continue;
                  if (!(_j < _len)) {
                    return _break();
                  } else {
                    _ref2 = _ref1[_j], kid = _ref2.kid, key_role = _ref2.key_role;
                    if (key_role === _this.config.C.keys.key_role.ENCRYPTION) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                          funcname: "Account._cpp2_encrypt_lks_client_half"
                        });
                        kbpgp.ukm.import_armored_public({
                          armored: kid
                        }, esc(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return km = arguments[0];
                            };
                          })(),
                          lineno: 256
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                            funcname: "Account._cpp2_encrypt_lks_client_half"
                          });
                          kbpgp.kb.box({
                            encrypt_for: kid,
                            msg: client_half
                          }, esc(__iced_deferrals.defer({
                            assign_fn: (function(__slot_1, __slot_2) {
                              return function() {
                                return __slot_1[__slot_2] = arguments[0];
                              };
                            })(ret, kid),
                            lineno: 257
                          })));
                          __iced_deferrals._fulfill();
                        })(_next);
                      });
                    } else {
                      return _continue();
                    }
                  }
                };
                _while(__iced_k);
              })(_next);
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, ret);
        };
      })(this));
    };

    Account.prototype._cpp2_reencrypt_pgp_private_key = function(_arg, cb) {
      var key, me, new_ppc, old_ppc, output, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      me = _arg.me, old_ppc = _arg.old_ppc, new_ppc = _arg.new_ppc;
      output = null;
      (function(_this) {
        return (function(__iced_k) {
          var _ref, _ref1;
          if ((key = me != null ? (_ref = me.private_keys) != null ? (_ref1 = _ref.primary) != null ? _ref1.bundle : void 0 : void 0 : void 0) != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                funcname: "Account._cpp2_reencrypt_pgp_private_key"
              });
              KeyManager.import_from_p3skb({
                armored: key
              }, esc(km));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                  funcname: "Account._cpp2_reencrypt_pgp_private_key"
                });
                km.unlock_p3skb({
                  tsenc: old_ppc.tsenc
                }, esc(__iced_deferrals.defer({
                  lineno: 266
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                    funcname: "Account._cpp2_reencrypt_pgp_private_key"
                  });
                  km.export_private_to_server({
                    tsenc: new_ppc.tsenc
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return output = arguments[0];
                      };
                    })(),
                    lineno: 267
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              });
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, output);
        };
      })(this));
    };

    Account.prototype._cpp2_compute_lks_mask = function(_arg, cb) {
      var lks_mask, new_ppc, old_ppc;
      old_ppc = _arg.old_ppc, new_ppc = _arg.new_ppc;
      lks_mask = xor_buffers(old_ppc.lks_client_half, new_ppc.lks_client_half).toString('hex');
      return cb(null, lks_mask);
    };

    Account.prototype.change_passphrase_v2 = function(_arg, cb) {
      var esc, lks_mask, lksch, me, new_pp, new_ppc, old_pp, old_ppc, params, private_key, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      old_pp = _arg.old_pp, new_pp = _arg.new_pp;
      old_ppc = new_ppc = null;
      esc = make_esc(cb, "change_passphrase_v2");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.change_passphrase_v2"
          });
          _this.config.request({
            method: "GET",
            endpoint: "me"
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return me = arguments[0];
              };
            })(),
            lineno: 292
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          salt = new Buffer(me.basics.salt, 'hex');
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
              funcname: "Account.change_passphrase_v2"
            });
            _this._cpp2_derive_passphrase_components({
              tsenc: _this.enc,
              salt: salt,
              passphrase: old_pp
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return old_ppc = arguments[0];
                };
              })(),
              lineno: 296
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                funcname: "Account.change_passphrase_v2"
              });
              _this._cpp2_derive_passphrase_components({
                salt: salt,
                passphrase: new_pp
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return new_ppc = arguments[0];
                  };
                })(),
                lineno: 297
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                  funcname: "Account.change_passphrase_v2"
                });
                _this._cpp2_encrypt_lks_client_half({
                  me: me,
                  client_half: new_ppc.lks_client_half
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return lksch = arguments[0];
                    };
                  })(),
                  lineno: 298
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                    funcname: "Account.change_passphrase_v2"
                  });
                  _this._cpp2_reencrypt_pgp_private_key({
                    me: me,
                    old_ppc: old_ppc,
                    new_ppc: new_ppc
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return private_key = arguments[0];
                      };
                    })(),
                    lineno: 299
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                      funcname: "Account.change_passphrase_v2"
                    });
                    _this._cpp2_compute_lks_mask({
                      old_ppc: old_ppc,
                      new_ppc: new_ppc
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return lks_mask = arguments[0];
                        };
                      })(),
                      lineno: 300
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    params = {
                      pwh: new_ppc.pwh,
                      pwh_version: _this.triplesec_version,
                      pwh_version: me.basics.passphrase_generation,
                      lks_mask: lks_mask,
                      lks_client_half: JSON.stringify(lksch)
                    };
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                        funcname: "Account.change_passphrase_v2"
                      });
                      _this.config.request({
                        method: "POST",
                        endpoint: "passphrase/replace",
                        params: params
                      }, esc(__iced_deferrals.defer({
                        lineno: 309
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      _this.enc = new_ppc.tsenc;
                      return cb(null);
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    Account.prototype.get_tsenc_for_decryption = function(_arg) {
      var passphrase;
      passphrase = _arg.passphrase;
      this.enc.set_key(passphrase);
      return this.enc;
    };

    Account.prototype.gen_nacl_eddsa_key = function(params, cb) {
      var err, gen, km, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      gen = kbpgp.kb.KeyManager.generate;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.gen_nacl_eddsa_key"
          });
          gen({
            seed: _this.nacl.eddsa,
            split: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return km = arguments[1];
              };
            })(),
            lineno: 326
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, km);
        };
      })(this));
    };

    Account.prototype.gen_nacl_dh_key = function(params, cb) {
      var err, gen, km, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      gen = kbpgp.kb.EncKeyManager.generate;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.gen_nacl_dh_key"
          });
          gen({
            seed: _this.nacl.dh,
            split: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return km = arguments[1];
              };
            })(),
            lineno: 333
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, km);
        };
      })(this));
    };

    return Account;

  })();

}).call(this);
