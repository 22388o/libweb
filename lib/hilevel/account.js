// Generated by IcedCoffeeScript 108.0.7
(function() {
  var Account, KeyManager, WordArray, bufsplit, iced, kbpgp, make_esc, triplesec, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  triplesec = require("triplesec");

  kbpgp = require('kbpgp');

  WordArray = triplesec.WordArray;

  KeyManager = kbpgp.KeyManager;

  make_esc = require('iced-error').make_esc;

  bufsplit = function(buf, lens) {
    var e, l, ret, s, _i, _len;
    s = 0;
    ret = [];
    for (_i = 0, _len = lens.length; _i < _len; _i++) {
      l = lens[_i];
      e = s + l;
      ret.push(buf.slice(s, e));
      s = e;
    }
    return ret;
  };

  exports.Account = Account = (function() {
    function Account(_arg) {
      var C;
      this.config = _arg.config;
      C = this.config.C;
      this.triplesec_version = this.config.C.triplesec.version;
      this.enc = new triplesec.Encryptor({
        version: this.triplesec_version
      });
      this.nacl = {};
      this.lks = {};
      this.extra_keymaterial = C.pwh.derived_key_bytes + C.nacl.eddsa_secret_key_bytes + C.nacl.dh_secret_key_bytes + C.device.lks_client_half_bytes;
    }

    Account.prototype.resalt = function(_arg, cb) {
      var err, keys, progress_hook, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      salt = _arg.salt, progress_hook = _arg.progress_hook;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.resalt"
          });
          _this.enc.resalt({
            salt: salt,
            extra_keymaterial: _this.extra_keymaterial,
            progress_hook: progress_hook
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return keys = arguments[1];
              };
            })(),
            lineno: 43
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            throw err;
          }
          return cb(keys);
        };
      })(this));
    };

    Account.prototype.scrypt_hash_passphrase = function(_arg, cb) {
      var C, encoding, key, keys, km, progress_hook, pwh, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      key = _arg.key, salt = _arg.salt, progress_hook = _arg.progress_hook, encoding = _arg.encoding;
      key = new triplesec.Buffer(key, 'utf8');
      this.enc.set_key(key);
      C = this.config.C;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.scrypt_hash_passphrase"
          });
          _this.resalt({
            salt: salt,
            progress_hook: progress_hook
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return keys = arguments[0];
              };
            })(),
            lineno: 63
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          km = keys.extra;
          _ref = bufsplit(km, [C.pwh.derived_key_bytes, C.nacl.eddsa_secret_key_bytes, C.nacl.dh_secret_key_bytes, C.device.lks_client_half_bytes]), pwh = _ref[0], _this.nacl.eddsa = _ref[1], _this.nacl.dh = _ref[2], _this.lks.clienf_half = _ref[3];
          if (encoding != null) {
            pwh = pwh.toString(encoding);
          }
          return cb(pwh);
        };
      })(this));
    };

    Account.prototype.fix_signup_bundle = function(bundle, cb) {
      var nb, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      nb = triplesec.V[this.triplesec_version].salt_size;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.fix_signup_bundle"
          });
          kbpgp.rand.SRF().random_bytes(nb, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return salt = arguments[0];
              };
            })(),
            lineno: 79
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
              funcname: "Account.fix_signup_bundle"
            });
            _this.scrypt_hash_passphrase({
              key: bundle.pw,
              salt: salt,
              encoding: 'hex'
            }, __iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.pwh = arguments[0];
                };
              })(bundle),
              lineno: 80
            }));
            __iced_deferrals._fulfill();
          })(function() {
            bundle.salt = salt.toString('hex');
            bundle.pwh_version = _this.triplesec_version;
            delete bundle.pw;
            return cb();
          });
        };
      })(this));
    };

    Account.prototype.gen_new_pwh = function(_arg, cb) {
      var pw, pwh, pwh_version, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pw = _arg.pw, salt = _arg.salt;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.gen_new_pwh"
          });
          _this.scrypt_hash_passphrase({
            key: pw,
            salt: salt,
            encoding: 'hex'
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return pwh = arguments[0];
              };
            })(),
            lineno: 95
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          pwh_version = _this.triplesec_version;
          return cb(null, pwh, pwh_version);
        };
      })(this));
    };

    Account.prototype.pw_to_pwh = function(_arg, cb) {
      var email_or_username, err, got, pw, pwh, pwh_version, res, salt, uid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pw = _arg.pw, email_or_username = _arg.email_or_username, uid = _arg.uid;
      err = pwh = pwh_version = salt = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.pw_to_pwh"
          });
          _this.config.request({
            method: "GET",
            endpoint: 'getsalt',
            params: {
              email_or_username: email_or_username,
              uid: uid
            }
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 110
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (err != null) {
              return __iced_k();
            } else {
              (function(__iced_k) {
                var _ref;
                if (!((got = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? _ref.pwh_version : void 0 : void 0) === _this.triplesec_version)) {
                  return __iced_k(err = new Error("Can only support PW hash version " + _this.triplesec_version + "; got " + got + " for " + (_this.config.escape_user_content(email_or_username))));
                } else {
                  salt = new triplesec.Buffer(res.body.salt, 'hex');
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                      funcname: "Account.pw_to_pwh"
                    });
                    _this.scrypt_hash_passphrase({
                      salt: salt,
                      key: pw,
                      encoding: null
                    }, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return pwh = arguments[0];
                        };
                      })(),
                      lineno: 116
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(pwh_version = _this.triplesec_version);
                  });
                }
              })(__iced_k);
            }
          })(function() {
            var _ref;
            console.log(typeof res !== "undefined" && res !== null ? res.body : void 0);
            return cb(err, pwh, pwh_version, salt, typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? _ref.login_session : void 0 : void 0);
          });
        };
      })(this));
    };

    Account.prototype.pw_to_login = function(_arg, cb) {
      var email_or_username, err, hmac, hmac_pwh, login_session, login_session_b64, pw, pwh, pwh_version, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pw = _arg.pw, email_or_username = _arg.email_or_username;
      login_session = hmac_pwh = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.pw_to_login"
          });
          _this.pw_to_pwh({
            pw: pw,
            email_or_username: email_or_username
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                pwh = arguments[1];
                pwh_version = arguments[2];
                salt = arguments[3];
                return login_session_b64 = arguments[4];
              };
            })(),
            lineno: 125
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            login_session = new triplesec.Buffer(login_session_b64, 'base64');
            hmac = new triplesec.HMAC(WordArray.from_buffer(pwh));
            hmac_pwh = hmac.update(WordArray.from_buffer(login_session)).finalize().to_hex();
            login_session = login_session_b64;
          }
          return cb(err, login_session, hmac_pwh, salt);
        };
      })(this));
    };

    Account.prototype.get_public_key = function(username, cb) {
      var err, res, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.get_public_key"
          });
          _this.config.request({
            endpoint: "user/lookup",
            params: {
              username: username
            }
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 139
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1, _ref2, _ref3;
          if (err == null) {
            ret = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? (_ref1 = _ref.them) != null ? (_ref2 = _ref1.public_keys) != null ? (_ref3 = _ref2.primary) != null ? _ref3.bundle : void 0 : void 0 : void 0 : void 0 : void 0;
            if (ret == null) {
              err = new Error("Cannot find a public key for '" + (_this.config.escape_user_content(username)) + "'");
            }
          }
          return cb(err, ret);
        };
      })(this));
    };

    Account.prototype.get_unlocked_private_key = function(pw, cb) {
      var bundle, err, esc, passphrase, res, sk, tsenc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(function(err) {
        return cb(err, null);
      });
      passphrase = new triplesec.Buffer(pw);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.get_unlocked_private_key"
          });
          _this.config.request({
            method: "GET",
            endpoint: "me"
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return res = arguments[0];
              };
            })(),
            lineno: 150
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1, _ref2, _ref3;
          bundle = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? (_ref1 = _ref.me) != null ? (_ref2 = _ref1.private_keys) != null ? (_ref3 = _ref2.primary) != null ? _ref3.bundle : void 0 : void 0 : void 0 : void 0 : void 0;
          sk = err = null;
          (function(__iced_k) {
            if (bundle != null) {
              tsenc = _this.get_tsenc_for_decryption({
                passphrase: passphrase
              });
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                  funcname: "Account.get_unlocked_private_key"
                });
                KeyManager.import_from_p3skb({
                  raw: bundle
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return sk = arguments[0];
                    };
                  })(),
                  lineno: 155
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                    funcname: "Account.get_unlocked_private_key"
                  });
                  sk.unlock_p3skb({
                    tsenc: tsenc
                  }, esc(__iced_deferrals.defer({
                    lineno: 156
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            err = null;
            if (sk == null) {
              err = new Error("Failed to get and unlock your private key");
            }
            return cb(err, sk);
          });
        };
      })(this));
    };

    Account.prototype.export_my_private_key = function(pw, cb) {
      var armored_private, err, esc, passphrase, sk, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "export_my_private_key");
      err = armored_private = null;
      passphrase = new triplesec.Buffer(pw);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.export_my_private_key"
          });
          _this.get_unlocked_private_key(pw, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return sk = arguments[0];
              };
            })(),
            lineno: 168
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
              funcname: "Account.export_my_private_key"
            });
            sk.sign({}, esc(__iced_deferrals.defer({
              lineno: 169
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                funcname: "Account.export_my_private_key"
              });
              sk.export_pgp_private_to_client({
                passphrase: passphrase
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return armored_private = arguments[0];
                  };
                })(),
                lineno: 170
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null, armored_private);
            });
          });
        };
      })(this));
    };

    Account.prototype.reencrypt_private_key = function(sk, cb) {
      var err, key, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.reencrypt_private_key"
          });
          sk.export_private_to_server({
            tsenc: _this.enc
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return key = arguments[1];
              };
            })(),
            lineno: 176
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, key);
        };
      })(this));
    };

    Account.prototype.change_passphrase = function(oldpw, newpw, cb) {
      var endpoint, esc, params, res, salt, sk, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      params = {};
      esc = make_esc(cb, "change_password");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.change_passphrase"
          });
          _this.pw_to_login({
            pw: oldpw
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                __slot_1.login_session = arguments[0];
                __slot_2.hmac_pwh = arguments[1];
                return salt = arguments[2];
              };
            })(params, params),
            lineno: 184
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
              funcname: "Account.change_passphrase"
            });
            _this.get_unlocked_private_key(oldpw, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return sk = arguments[0];
                };
              })(),
              lineno: 185
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                funcname: "Account.change_passphrase"
              });
              _this.gen_new_pwh({
                pw: newpw,
                salt: salt
              }, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1, __slot_2) {
                  return function() {
                    __slot_1.pwh = arguments[0];
                    return __slot_2.pwh_version = arguments[1];
                  };
                })(params, params),
                lineno: 186
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (typeof sk !== "undefined" && sk !== null) {
                  endpoint = "key/add";
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                      funcname: "Account.change_passphrase"
                    });
                    _this.reencrypt_private_key(sk, esc(__iced_deferrals.defer({
                      assign_fn: (function(__slot_1) {
                        return function() {
                          return __slot_1.private_key = arguments[0];
                        };
                      })(params),
                      lineno: 189
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k(endpoint = "account/update");
                }
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
                    funcname: "Account.change_passphrase"
                  });
                  _this.config.request({
                    method: "POST",
                    endpoint: endpoint,
                    params: params
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return res = arguments[0];
                      };
                    })(),
                    lineno: 192
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return cb(null, typeof res !== "undefined" && res !== null ? res.body : void 0);
                });
              });
            });
          });
        };
      })(this));
    };

    Account.prototype.get_tsenc_for_decryption = function(_arg) {
      var passphrase;
      passphrase = _arg.passphrase;
      this.enc.set_key(passphrase);
      return this.enc;
    };

    Account.prototype.gen_nacl_eddsa_key = function(params, cb) {
      var err, gen, km, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      gen = kbpgp.kb.KeyManager.generate;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.gen_nacl_eddsa_key"
          });
          gen({
            seed: _this.nacl.eddsa,
            split: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return km = arguments[1];
              };
            })(),
            lineno: 206
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, km);
        };
      })(this));
    };

    Account.prototype.gen_nacl_dh_key = function(params, cb) {
      var err, gen, km, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      gen = kbpgp.kb.EncKeyManager.generate;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb/src/hilevel/account.iced",
            funcname: "Account.gen_nacl_dh_key"
          });
          gen({
            seed: _this.nacl.dh,
            split: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return km = arguments[1];
              };
            })(),
            lineno: 213
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, km);
        };
      })(this));
    };

    return Account;

  })();

}).call(this);
