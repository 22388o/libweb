// Generated by IcedCoffeeScript 108.0.7
(function() {
  var Request, base,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  base = require('../base/index').base;

  exports.Request = Request = (function(_super) {
    __extends(Request, _super);

    function Request(_arg) {
      var get_csrf_token;
      this.$ = _arg.$, get_csrf_token = _arg.get_csrf_token;
      Request.__super__.constructor.call(this, {
        get_csrf_token: get_csrf_token
      });
    }

    Request.prototype.request = function(_arg, cb) {
      var always, headers, method, ok_empty_body, ok_http_status_codes, ok_json_status_codes, params, t, url, xhr;
      url = _arg.url, params = _arg.params, ok_http_status_codes = _arg.ok_http_status_codes, ok_json_status_codes = _arg.ok_json_status_codes, ok_empty_body = _arg.ok_empty_body, method = _arg.method;
      headers = {};
      if (((t = typeof this.get_csrf_token === "function" ? this.get_csrf_token() : void 0) != null) && t.length) {
        headers["X-CSRF-Token"] = t;
      }
      ok_http_status_codes || (ok_http_status_codes = [200]);
      ok_json_status_codes || (ok_json_status_codes = ['OK']);
      always = function(xhr) {
        var body, d, err, msg, out, _ref, _ref1, _ref2, _ref3;
        err = null;
        out = {
          body: null,
          http_status: null,
          json_status: null
        };
        if (((out.http_status = xhr.status) != null) && (_ref = out.http_status, __indexOf.call(ok_http_status_codes, _ref) >= 0)) {
          if ((body = xhr.responseJSON) == null) {
            if (!ok_empty_body) {
              err = new Error("empty body sent back from server");
            }
          } else if (((out.json_status = (_ref1 = body.status) != null ? _ref1.name : void 0) == null) || !(_ref2 = out.json_status, __indexOf.call(ok_json_status_codes, _ref2) >= 0)) {
            msg = "Server failure";
            if ((d = body != null ? (_ref3 = body.status) != null ? _ref3.desc : void 0 : void 0)) {
              msg += ": " + d;
            }
            err = new Error(msg);
          } else {
            out.body = body;
          }
        } else {
          msg = "error in " + method;
          if (out.http_status != null) {
            msg += " (HTTP code " + out.http_status + ")";
          }
          err = new Error(msg);
        }
        return cb(err, out);
      };
      params = {
        type: method,
        url: url,
        data: params,
        headers: headers,
        dataType: "json"
      };
      xhr = $.ajax(params);
      return xhr.always(function() {
        return always(xhr);
      });
    };

    return Request;

  })(base.Request);

}).call(this);
